plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
}



ext.appVersion = '1.0'
ext.defaultNoteSrVersion = '5.1'

group = 'app.notesr.cli'
version = ext.appVersion
archivesBaseName = 'notesr-cli'

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21

    dependencies {
        implementation 'org.slf4j:slf4j-api:2.0.9'
        implementation 'org.slf4j:slf4j-simple:2.0.9'
        compileOnly 'org.projectlombok:lombok:1.18.32'
        annotationProcessor 'org.projectlombok:lombok:1.18.32'
        testImplementation platform('org.junit:junit-bom:5.10.0')
        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation 'org.mockito:mockito-inline:5.2.0'
        testImplementation 'org.mockito:mockito-junit-jupiter:5.17.0'
        testImplementation 'org.junit.jupiter:junit-jupiter'
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
        maxHeapSize = '1G'

        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    jacocoTestReport {
        dependsOn test

        reports {
            xml.required = true
            html.required = true
        }
    }

    checkstyle {
        toolVersion = '10.12.4'
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }

    tasks.matching { it.name == 'check' }.configureEach {
        dependsOn tasks.matching { t -> t.name == 'checkstyleMain' || t.name == 'checkstyleTest' }
    }
}

tasks.register('jacocoRootReport', JacocoReport) {
    dependsOn subprojects.test

    reports {
        xml.required = true
        html.required = true
    }

    def excludedModules = ['test-utils', 'test-common']

    def executionDataFiles = files(subprojects.findAll { subproject ->
        !excludedModules.contains(subproject.name)
    }.collect { subproject ->
        fileTree(dir: subproject.layout.buildDirectory.dir('jacoco').get().asFile, includes: [
                'test.exec',
                'test*.exec'
        ])
    })

    executionData executionDataFiles

    subprojects.each { subproject ->
        sourceDirectories.from files("${subproject.projectDir}/src/main/java")

        def classDir = subproject.layout.buildDirectory.dir('classes/java/main').get().asFile

        if (excludedModules.contains(subproject.name)) {
            classDirectories.from files()
        } else {
            classDirectories.from fileTree(dir: classDir)
        }
    }
}

tasks.named('build') {
    dependsOn tasks.named('jacocoRootReport')
}

tasks.register('copyCliBinaryToRoot', Copy) {
    dependsOn ':cli:installDist'

    from('cli/build/install/notesr-cli')
    into(layout.buildDirectory.dir("notesr-cli"))

    includeEmptyDirs = false
}

tasks.named('build') {
    dependsOn tasks.named('copyCliBinaryToRoot')
}
